// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String? //bcrypt password
  isAdmin        Boolean   @default(false) //sadece bu kısmı biz ekledik
  accounts       Account[]
  sessions       Session[]
  Order          Order[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//userkayıt son....

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  tit       String    @unique
  products  Product[]
}

model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  title     String
  publicId  String? //cloudinary için 
  desc      String
  imageUrl  String?
  price     Float
  options   Option[]
  category  Category @relation(fields: [catTitle], references: [tit])
  catTitle  String
}

model Option {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  size      String // Name of the option (e.g., "medium" or "small")
  price     Float // Price associated with the option
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  price     Float
  products  Json[]
  status    String
  //intent_id String?  @unique   //for Stripe payment integration required
  user      User     @relation(fields: [userEmail], references: [email])
  userEmail String
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  name      String
  email     String
  message   String
}

model Newsletter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  email     String
}
